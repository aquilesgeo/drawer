<!DOCTYPE html>
<html>
<head>
<style>
	.toolButton{
		width:32px;
		height:32px;
		background:#505050;
		cursor:pointer;
	}
	.toolButton:hover{
		background:#606060;
	}
</style>
</head>
<body style="background:#202020;margin:0px">
<table style="width:100%;height:100%;border-collapse:collapse">
<tr>
<td style="vertical-align:top;width:40px">
<div class="toolButton" onclick="selectTool(toolCursor)">+</div>
<div class="toolButton" onclick="selectTool(toolAddCurve)">+</div>
</td>
<td>
<div id="panelContainer" style="position:relative;width:1200px;height:800px;background:#c0c0c0;overflow:hidden">
<img id="picture" src="" style="opacity:0.3;position:absolute;top:0px;left:0px">
<canvas id="panelDraw" style="position:absolute;top:0px;left:0px" width="1200" height="800">
</canvas>
<div id="panelEvent" style="position:absolute;top:0px;left:0px;width:1200px;height:800px" onmousedown="mouseDown(event)" onmouseup="mouseUp(event)" onmousemove="mouseMove(event)">

</div>
</div>
<input type="file" id="pictureFile" onchange="loadPictureFile()">
</td>
<td style="vertical-align:top;width:40px">
</td>
</tr>
</table>
<script>
	var mouseButton = [false, false, false];
	var canvas = document.getElementById("panelDraw");
	var handler = document.getElementById("panelContainer");
	var ctx = canvas.getContext("2d");
	var px = 0;
	var py = 0;
	var hasImage = false;	// Indicate if an image is selected
	var pictureImage = document.getElementById("picture");
	var pictureSize = null;
	
	var toolCursor = new ToolCursor();
	var toolWheelMouse = new ToolWheelMouse();
	var toolAddCurve = new ToolAddCurve();
	
	var curTool = toolCursor;
	var ph = new Point(handler.offsetLeft, handler.offsetTop);
	
	document.onkeydown = function(evt){
		if (evt.keyCode==81 && data.scale>0.1){
			data.scale-=0.1;
			if (hasImage){
				pictureImage.width = Math.trunc(pictureSize.x*data.scale);
				pictureImage.height = Math.trunc(pictureSize.y*data.scale);
			}
			drawCanvas();
		}else if (evt.keyCode==87 && data.scale<10.0){
			data.scale+=0.1;
			if (hasImage){
				pictureImage.width = Math.trunc(pictureSize.x*data.scale);
				pictureImage.height = Math.trunc(pictureSize.y*data.scale);
			}
			drawCanvas();
		}else if (curTool.onKeyDown != undefined){
			curTool.onKeyDown(evt);
		}
	}	
	
	function Point(x, y){
		this.x = x;
		this.y = y;
		return this;
	}
		
	function Curve(){
		this.selected = false;
		this.points = new Array();
		this.addPoint = function(x, y){
			var p = new Point(x, y);
			this.points.push(p);
		}
		this.draw = function(){
			var i = 0;
			var n = this.points.length;
			ctx.beginPath();
			
			ctx.strokeStyle = this.selected?"#0000c0":"#000000";
			
			data.moveTo(this.points[0].x, this.points[0].y);
			for(i=1;i<n;i+=2){
				data.quadraticCurveTo(this.points[i].x, this.points[i].y, this.points[i+1].x, this.points[i+1].y);
			}
			ctx.stroke();
			if (this.selected){
				ctx.fillStyle = "#000000";
				ctx.strokeStyle = "#000000";
				for(i=0;i<n;i+=2){
					ctx.fillRect(this.points[i].x*data.scale + data.o.x - 1, this.points[i].y*data.scale + data.o.y - 1, 3, 3);
				}
			}
		}
		return this;
	}
	
	function Data(){
		this.scale = 1.0;
		this.o = new Point(0,0);
		this.curves = new Array();
		this.setAllSelected = function(selected){
			var i, n = this.curves.length;
			for(i=0;i<n;i++){
				this.curves[i].selected = selected;
			}
		}
		
		this.addCurve = function(){
			var curve;
			this.setAllSelected(false);
			curve = new Curve();
			curve.selected = true;
			this.curves.push(curve);
			return curve;
		};
		
		this.drawCurves = function(){
			var i, n = this.curves.length;
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			for(i=0;i<n;i++){
				this.curves[i].draw();
			}
		}
		
		this.lineTo = function(x, y){
			ctx.lineTo(x*this.scale + this.o.x, y*this.scale + this.o.y);
		}
		
		this.quadraticCurveTo = function(x0, y0, x1, y1){
			ctx.quadraticCurveTo(x0*this.scale + this.o.x, y0*this.scale + this.o.y, x1*this.scale + this.o.x, y1*this.scale + this.o.y)
		}
		
		this.moveTo = function(x, y){
			ctx.moveTo(x*this.scale + this.o.x, y*this.scale + this.o.y);
		}
		return this;
	}
	
	var data = new Data();
	
	function selectTool(tool){
		if (curTool==tool){
			return;
		}
		if (curTool.lostFocus!=undefined){
			curTool.lostFocus();
		}
		curTool = tool;
		if (curTool.gotFocus!=undefined){
			curTool.gotFocus();
		}
		console.log(JSON.stringify(data));
	}
	function ToolWheelMouse(){
		this.x0 = 0;
		this.y0 = 0;
		this.bstatus = false;
		this.onMouseDown = function(evt){
			this.x0 = evt.pageX;
			this.y0 = evt.pageY;
			this.bstatus = true;
		}
		this.onMouseUp = function(evt){
			this.bstatus = false;
		}
		this.onMouseMove = function(evt){
			if (!this.bstatus){
				return;
			}
			var dx = evt.pageX - this.x0;
			var dy = evt.pageY - this.y0;
			data.o.x += dx;
			data.o.y += dy;
			if (hasImage){
				pictureImage.style.left = data.o.x+'px';
				pictureImage.style.top = data.o.y+'px';
			}
			this.x0 = evt.pageX;
			this.y0 = evt.pageY;
			drawCanvas();
		}
	}
	
	function ToolAddCurve(){
		this.status = 0;
		this.curve = null;
		this.a = new Point(0,0);
		this.b = new Point(0,0);
		this.c = new Point(0,0);
		
		this.addPoint = function(x, y){
			if (this.curve==null){
				this.curve = data.addCurve();
			}
			this.curve.addPoint(x, y);
		}
		this.onMouseDown = function(evt){
			if (evt.button != 0){
				return;
			}
			if (this.status == 1){
				this.a.x = this.c.x;
				this.a.y = this.c.y;
			}else{
				this.a.x = (evt.clientX-data.o.x-ph.x)/data.scale;
				this.a.y = (evt.clientY-data.o.y-ph.y)/data.scale;
			}
			this.b.x = (evt.clientX-data.o.x-ph.x)/data.scale;
			this.b.y = (evt.clientY-data.o.y-ph.y)/data.scale;
			this.c.x = this.b.x;
			this.c.y = this.b.y;
		}
		this.onMouseUp = function(evt){
			if (evt.button != 0){
				return;
			}
			if (this.status == 0){
				this.b.x = (evt.clientX-data.o.x-ph.x)/data.scale;
				this.b.y = (evt.clientY-data.o.y-ph.y)/data.scale;
				this.c.x = this.b.x;
				this.c.y = this.b.y;
				this.addPoint(this.b.x, this.b.y);
				this.status = 1;
			}else if (this.status==1){
				this.addPoint((evt.clientX-data.o.x-ph.x)/data.scale, (evt.clientY-data.o.y-ph.y)/data.scale);
				this.addPoint(this.c.x, this.c.y);
			}
			drawCanvas();
		}
		this.onMouseMove = function(evt){
			if (this.status==1){
				this.b.x = (evt.clientX-data.o.x-ph.x)/data.scale;
				this.b.y = (evt.clientY-data.o.y-ph.y)/data.scale;
				drawCanvas();
			}
		}
		this.onKeyDown = function(evt){
			if (evt.keyCode == 27){
				data.setAllSelected(false);
				this.status = 0;
				this.curve = null;
				drawCanvas();
			}
		}
		this.drawCursor = function(){
			if (this.status==0){
				return;
			}
			if (mouseButton[0]){
				ctx.beginPath();
				ctx.strokeStyle = "#c00000";
				data.moveTo(this.a.x, this.a.y);
				data.quadraticCurveTo(this.b.x, this.b.y, this.c.x, this.c.y);
				ctx.stroke();
			}
		}
		return this;
	}
	
	function ToolCursor(){
		return this;
	}
	
	drawCanvas();
	
	function drawCanvas(){
		data.drawCurves();
		if (curTool.drawCursor!=undefined){
			curTool.drawCursor();
		}
	}
	
	function mouseDown(evt){
		mouseButton[evt.button] = true;
		if (evt.button==1){
			toolWheelMouse.onMouseDown(evt);
		} else if (curTool.onMouseDown != undefined){
			curTool.onMouseDown(evt);
		}
	}
	function mouseUp(evt){
		mouseButton[evt.button] = false;
		if (evt.button==1){
			toolWheelMouse.onMouseUp(evt);
		} else if (curTool.onMouseUp != undefined){
			curTool.onMouseUp(evt);
		}
	}
	function mouseMove(evt){
		if (mouseButton[1]){
			toolWheelMouse.onMouseMove(evt);
		}else if (curTool.onMouseMove != undefined){
			curTool.onMouseMove(evt);
		}
	}
	
	function loadPictureFile() {
		var file = document.getElementById('pictureFile').files[0];
		var reader  = new FileReader();

		reader.onloadend = function () {
			pictureImage.src = reader.result;
			pictureSize = new Point(pictureImage.width, pictureImage.height);
			pictureImage.style.left = 0;
			pictureImage.style.top = 0;
			data.o.x = 0;
			data.o.y = 0;
			data.scale = 1.0;
			hasImage = true;
		}
		
		if (file) {
			reader.readAsDataURL(file);
		} else {
			pictureImage.src = "";
		}
	}
</script>
</body>
</html>